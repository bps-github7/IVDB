"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = exports.validateKey = exports.parse = void 0;
const fs = require("fs");
const path = require("path");
const error_1 = require("../error");
const logger_1 = require("../logger");
const RESERVED_KEYS = [
    "FIREBASE_CONFIG",
    "CLOUD_RUNTIME_CONFIG",
    "ENTRY_POINT",
    "GCP_PROJECT",
    "GCLOUD_PROJECT",
    "GOOGLE_CLOUD_PROJECT",
    "FUNCTION_TRIGGER_TYPE",
    "FUNCTION_NAME",
    "FUNCTION_MEMORY_MB",
    "FUNCTION_TIMEOUT_SEC",
    "FUNCTION_IDENTITY",
    "FUNCTION_REGION",
    "FUNCTION_TARGET",
    "FUNCTION_SIGNATURE_TYPE",
    "K_SERVICE",
    "K_REVISION",
    "PORT",
    "K_CONFIGURATION",
];
const LINE_RE = new RegExp("^" +
    "\\s*" +
    "(\\w+)" +
    "\\s*=\\s*" +
    "(" +
    "\\s*'(?:\\'|[^'])*'|" +
    '\\s*"(?:\\"|[^"])*"|' +
    "[^\\#\\r\\n]+" +
    ")?" +
    "\\s*" +
    "(?:#[^\\n]*)?" +
    "$", "gms");
function parse(data) {
    const envs = {};
    const errors = [];
    data = data.replace(/\r\n?/, "\n");
    let match;
    while ((match = LINE_RE.exec(data))) {
        let [, k, v] = match;
        v = (v || "").trim();
        let quotesMatch;
        if ((quotesMatch = /^(["'])(.*)\1$/ms.exec(v)) != null) {
            v = quotesMatch[2];
            if (quotesMatch[1] === '"') {
                v = v.replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\\v", "\v");
                v = v.replace(/\\([\\'"])/g, "$1");
            }
        }
        envs[k] = v;
    }
    const nonmatches = data.replace(LINE_RE, "");
    for (let line of nonmatches.split(/[\r\n]+/)) {
        line = line.trim();
        if (line.startsWith("#")) {
            continue;
        }
        if (line.length)
            errors.push(line);
    }
    return { envs, errors };
}
exports.parse = parse;
class KeyValidationError extends Error {
}
function validateKey(key) {
    if (RESERVED_KEYS.includes(key)) {
        throw new KeyValidationError(`Key ${key} is reserved for internal use.`);
    }
    if (!/^[A-Z_][A-Z0-9_]*$/.test(key)) {
        throw new KeyValidationError(`Key ${key} must start with an uppercase ASCII letter or underscore` +
            ", and then consist of uppercase ASCII letters, digits, and underscores.");
    }
    if (key.startsWith("X_GOOGLE_") || key.startsWith("FIREBASE_")) {
        throw new KeyValidationError(`Key ${key} starts with a reserved prefix (X_GOOGLE_ or FIREBASE_)`);
    }
}
exports.validateKey = validateKey;
function parseStrict(data) {
    const { envs, errors } = parse(data);
    if (errors.length) {
        throw new error_1.FirebaseError(`Invalid dotenv file, error on lines: ${errors.join(",")}`);
    }
    const validationErrors = [];
    for (const key of Object.keys(envs)) {
        try {
            validateKey(key);
        }
        catch (err) {
            logger_1.logger.debug(`Failed to validate key ${key}: ${err}`);
            if (err instanceof KeyValidationError) {
                validationErrors.push(err);
            }
            else {
                throw err;
            }
        }
    }
    if (validationErrors.length > 0) {
        throw new error_1.FirebaseError("Validation failed", { children: validationErrors });
    }
    return envs;
}
function load(options) {
    var _a;
    const targetFiles = [".env"];
    targetFiles.push(`.env.${options.projectId}`);
    if (options.projectAlias && options.projectAlias.length) {
        targetFiles.push(`.env.${options.projectAlias}`);
    }
    const targetPaths = targetFiles
        .map((f) => path.join(options.functionsSource, f))
        .filter(fs.existsSync);
    if (targetPaths.some((p) => path.basename(p) === `.env.${options.projectId}`)) {
        if (options.projectAlias && options.projectAlias.length) {
            for (const p of targetPaths) {
                if (path.basename(p) === `.env.${options.projectAlias}`) {
                    throw new error_1.FirebaseError(`Can't have both .env.${options.projectId} and .env.${options.projectAlias}> files.`);
                }
            }
        }
    }
    let envs = {};
    for (const targetPath of targetPaths) {
        try {
            const data = fs.readFileSync(targetPath, "utf8");
            envs = Object.assign(Object.assign({}, envs), parseStrict(data));
        }
        catch (err) {
            throw new error_1.FirebaseError(`Failed to load environment variables from ${targetPath}.`, {
                exit: 2,
                children: ((_a = err.children) === null || _a === void 0 ? void 0 : _a.length) > 0 ? err.children : [err],
            });
        }
    }
    logger_1.logger.debug(`Loaded environment variables ${JSON.stringify(envs)} from ${targetPaths.join(",")}.`);
    return envs;
}
exports.load = load;
